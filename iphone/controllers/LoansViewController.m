#import "LoansViewController.h"
#import "LoansDetailViewContoller.h"
#import "Image.h"
#import "LoansTableViewCell.h"
#import "SharedExtras.h"
#import "CountTableViewCell.h"
#import "DebugReporter.h"
#import "Settings.h"
#import "UIViewExtras.h"
#import "WebViewController.h"
#import "OPAC.h"
#import "UIColorExtras.h"
#import "SectionHeaderView.h"
#import "UIColorFactory.h"

@implementation LoansViewController

- (void) dealloc
{
	[refreshButton release];
	[dayDateFormatter release];
	[monthDateFormatter release];
	[weekdayDateFormatter release];
	[dataStore release];
	[updateManager release];
	
    [super dealloc];
}

- (void) viewDidLoad
{
    [super viewDidLoad];
	
	self.navigationController.navigationBar.tintColor = [UIColorFactory themeColor];

	dataStore = [[DataStore sharedDataStore] retain];

	dayDateFormatter = [[NSDateFormatter alloc] init];
	[dayDateFormatter setDateFormat: @"d"];
	
	monthDateFormatter = [[NSDateFormatter alloc] init];
	[monthDateFormatter setDateFormat: @"MMM"];
	
	weekdayDateFormatter = [[NSDateFormatter alloc] init];
	[weekdayDateFormatter setDateFormat: @"EEE"];

	// Add refresh button
	refreshButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem: UIBarButtonSystemItemRefresh
		target: self action: @selector(reload:)];
	animatedRefreshButton = [[AnimatedRefreshButton alloc] init];
	self.navigationItem.rightBarButtonItem = refreshButton;
	
	// Setup the update manager.  Note that we call resendNotifications to force
	// the notifications to be resent because each tab bar view is created on demand
	// and it may have missed a notification
	updateManager = [[UpdateManager sharedUpdateManager] retain];
	[[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(updateBegin:)
		name: @"UpdateBegin" object: nil];
	[[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(updateEnd:)
		name: @"UpdateEnd" object: nil];
	[updateManager resendNotifications];

	self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
	
	[[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(reloadTable:)
		name: @"TablesNeedReloading" object: nil];
	[[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(debugReport)
		name: @"ShakeEvent" object: nil];

// For hacking the background image.  The background image was generated by taking
// a snapshot of a disabled button and decreasing the brightness by 20 in Photoshop
//	self.navigationItem.leftBarButtonItem = refreshButton;
//	refreshButton.enabled = NO;
//	self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
	
	[self reloadTable: nil];
}

- (void) viewWillAppear: (BOOL) animated
{
	[super viewWillAppear: animated];
	[self reloadTable: nil];
	
	// Restore the previous scroll position
	NSUserDefaults *defaults		= [NSUserDefaults standardUserDefaults];
	CGFloat offset					= [defaults floatForKey: @"ScrollPositionLoansView"];
	CGFloat maxOffset				= self.tableView.contentSize.height - [self.tableView frame].size.height;
	if (maxOffset < 0) maxOffset	= 0;
	if (offset > maxOffset) offset	= maxOffset;
	self.tableView.contentOffset	= CGPointMake(0, offset);
}

- (void) viewWillDisappear: (BOOL) animated
{
	[super viewWillDisappear: animated];
	
	// Save the current scroll postion
	NSUserDefaults *defaults	= [NSUserDefaults standardUserDefaults];
	CGFloat offset				= self.tableView.contentOffset.y;
	[defaults setFloat: offset forKey: @"ScrollPositionLoansView"];
}

// -----------------------------------------------------------------------------
//
// Release any properties that are loaded in viewDidLoad or can be recreated
// lazily.
//
// -----------------------------------------------------------------------------
- (void) viewDidUnload
{
	[fetchedResultsController release];
	fetchedResultsController = nil;
}

- (void) reload: (id) sender
{
	[updateManager update];
}

- (void) updateBegin: (id) sender
{
	[animatedRefreshButton startAnimating];
	self.navigationItem.rightBarButtonItem = animatedRefreshButton.button;
}

- (void) updateEnd: (id) sender
{
	[animatedRefreshButton stopAnimating];
	self.navigationItem.rightBarButtonItem = refreshButton;
}

- (void) reloadTable: (id) sender
{
	if (fetchedResultsController == nil)
	{
		fetchedResultsController			= [[dataStore fetchLoans] retain];
		fetchedResultsController.delegate	= self;
	}
	
	NSError *error;
//	[fetchedResultsController.managedObjectContext lock];
	if ([fetchedResultsController performFetch: &error] == NO)
	{
		[dataStore logError: error withSummary: @"failed to reloadTable in LoansViewController"];
	}

	[self.tableView reloadData];
//	[fetchedResultsController.managedObjectContext unlock];
	
	// Overlay the "No Loans message"
	if (NO && [dataStore countLoans] == 0)
	{
		[[self.view superview] addOverlayView: noLoansView];
		
		BOOL authenticationOK				= [dataStore authenticationOKForAllLibraryCards];
		noLoansViewMainLabel.text			= (authenticationOK == YES) ? @"No Loans" : @"Invalid Login";
		BOOL showBottomHints				= [[dataStore selectLibraryCards] count] == 0 || authenticationOK == NO;
		BOOL showTopHints					= !showBottomHints;
		noLoansViewBottomHintArrow.hidden	= showTopHints;
		noLoansViewBottomHintLabel.hidden	= showTopHints;
		noLoansViewTopHintArrow.hidden		= showBottomHints;
		noLoansViewTopHintLabel.hidden		= showBottomHints;
	}
	else
	{
		[[self.view superview] removeOverlayView: noLoansView];
	}
}

// =============================================================================
#pragma mark -
#pragma mark NSFetchedResultsController delegates

- (void) controllerDidChangeContent: (NSFetchedResultsController *) controller
{
	[self reloadTable: nil];
}

// =============================================================================
#pragma mark -
#pragma mark Debug report

- (void) debugReport
{
	DebugReporter *reporter = [DebugReporter sharedDebugReporter];
	[reporter presentDebugReporterForView: self];
}

// =============================================================================
#pragma mark -
#pragma mark Table view methods

- (UIView *) tableView: (UITableView *) tableView viewForHeaderInSection: (NSInteger) section 
{
//return nil;

	return [SectionHeaderView sectionHeaderViewForTable: tableView
		title: [self tableView: tableView titleForHeaderInSection: section]];
}

- (NSInteger) numberOfSectionsInTableView: (UITableView *) tableView
{
//	[fetchedResultsController.managedObjectContext lock];
	NSInteger count = [[fetchedResultsController sections] count];
//	[fetchedResultsController.managedObjectContext unlock];
	
	return count;
}

// -----------------------------------------------------------------------------
//
// Number of rows in section.
//
// -----------------------------------------------------------------------------
- (NSInteger) tableView: (UITableView *) tableView numberOfRowsInSection: (NSInteger) section
{
//	[fetchedResultsController.managedObjectContext lock];
	NSInteger count = [[[fetchedResultsController sections] objectAtIndex: section] numberOfObjects];
//	[fetchedResultsController.managedObjectContext unlock];
	
	return count;
}

- (NSString *) tableView: (UITableView *) tableView titleForHeaderInSection: (NSInteger) section
{
//	[fetchedResultsController.managedObjectContext lock];
	NSString *name = [[[fetchedResultsController sections] objectAtIndex: section] name];
	name = [dataStore libraryCardNameForOrdering: [name intValue]];
//	[fetchedResultsController.managedObjectContext unlock];
	
	return name;
}

// -----------------------------------------------------------------------------
//
// Table cell content and appearance.
//
// -----------------------------------------------------------------------------
- (UITableViewCell *) tableView: (UITableView *) tableView cellForRowAtIndexPath: (NSIndexPath *) indexPath
{
//	[fetchedResultsController.managedObjectContext lock];
	NSInteger count = [[[fetchedResultsController sections] objectAtIndex: indexPath.section] numberOfObjects];
	Loan *loan		= (indexPath.row < count) ? [fetchedResultsController objectAtIndexPath: indexPath] : nil;
	Loan *prevLoan	= (loan && indexPath.row > 0) ? [fetchedResultsController objectAtIndexPath: [NSIndexPath indexPathForRow: indexPath.row - 1 inSection: indexPath.section]] : nil;
//	[fetchedResultsController.managedObjectContext unlock];
	
	// Display the count on the last row
	if ([loan.dummy boolValue])
	{
		UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: @"CountCell"];
		if (cell == nil)
		{
			cell = [[[CountTableViewCell alloc] initWithFrame: CGRectZero reuseIdentifier: @"CountCell"] autorelease];
		}
		
		if ([loan.libraryCard.authenticationOK boolValue] == NO)
		{
			cell.textLabel.text = @"Invalid Login";
			cell.accessoryType	= UITableViewCellAccessoryNone;
		}
		else
		{
			int count			= indexPath.row;
			cell.textLabel.text = (count == 1) ? @"1 Loan" : [NSString stringWithFormat: @"%d Loans", count];
			
			OPAC *opac			= [OPAC opacForLibraryCard: loan.libraryCard];
			cell.accessoryType	= ([opac respondsToSelector: @selector(myAccountURL)])
									? UITableViewCellAccessoryDetailDisclosureButton : UITableViewCellAccessoryNone;
		}
		
		return cell;
	}

	NSInteger daysUntilDue = [loan daysUntilDue];
	LoansTableViewCell *cell;
	if (daysUntilDue <= 0)
	{
		// Red coloured overdue loan cell
		cell = (LoansTableViewCell *) [tableView dequeueReusableCellWithIdentifier: @"OverdueLoansCell"];
		if (cell == nil)
		{
			cell = [[[LoansTableViewCell alloc] initWithFrame: CGRectZero reuseIdentifier: @"OverdueLoansCell"] autorelease];
			cell.backgroundImageView.image	= [UIImage imageNamed: @"OverdueBackground.png"];
			cell.dueDateDay.textColor		= [UIColor whiteColor];
			cell.dueDateMonth.textColor		= [UIColor whiteColor];
		}
	}
	else if (daysUntilDue <= [[Settings sharedSettings].overdueAlertValue intValue])
	{
		// White coloured normal loan cell
		cell = (LoansTableViewCell *) [tableView dequeueReusableCellWithIdentifier: @"WarningLoansCell"];
		if (cell == nil)
		{
			cell = [[[LoansTableViewCell alloc] initWithFrame: CGRectZero reuseIdentifier: @"WarningLoansCell"] autorelease];
			cell.backgroundImageView.image	= [UIImage imageNamed: @"WarningBackground.png"];
			cell.dueDateDay.textColor		= [UIColor whiteColor];
			cell.dueDateMonth.textColor		= [UIColor whiteColor];
		}
	}
	else
	{
		// White coloured normal loan cell
		cell = (LoansTableViewCell *) [tableView dequeueReusableCellWithIdentifier: @"LoansCell"];
		if (cell == nil)
		{
			cell = [[[LoansTableViewCell alloc] initWithFrame: CGRectZero reuseIdentifier: @"LoansCell"] autorelease];
		}
	}
	
	cell.textLabel.text			= loan.title;
	cell.detailTextLabel.text	= loan.author;
	
	// Only display the due date for the first item
	BOOL showDueDate = YES;
	if (prevLoan && [loan.dueDate isEqualToDate: prevLoan.dueDate])
	{
		showDueDate = NO;
	}
	
	if (showDueDate)
	{
		cell.dueDateDay.text = [dayDateFormatter stringFromDate: loan.dueDate];
		
		// Display the month or the weekday value
		int daysUntilDue = [loan daysUntilDue];
//		if (daysUntilDue == 0)
		if ([loan.dueDate isToday])
		{
			cell.dueDateMonth.text = @"TODAY";
		}
		else if (0 < daysUntilDue && daysUntilDue < 7)
		{
			cell.dueDateMonth.text = [[weekdayDateFormatter stringFromDate: loan.dueDate] uppercaseString];
		}
		else
		{
			cell.dueDateMonth.text = [[monthDateFormatter stringFromDate: loan.dueDate] uppercaseString];
		}
	}
	else
	{
		cell.dueDateDay.text	= @"";
		cell.dueDateMonth.text	= @"";
	}
	
	// Group the rows correctly with a long divider
	BOOL longDivider = NO;
	if (indexPath.row == [self.tableView numberOfRowsInSection: indexPath.section] - 1)
	{
		longDivider = YES;
	}
	else
	{
		Loan *nextLoan = [fetchedResultsController objectAtIndexPath: [NSIndexPath indexPathForRow: indexPath.row + 1 inSection: indexPath.section]];
		if (![loan.dueDate isEqualToDate: nextLoan.dueDate])
		{
			longDivider = YES;
		}
	}
	
	cell.longDivider = longDivider;

	Image *image = loan.image;
	if (image.thumbnail)
	{
		cell.imageView.image	= [UIImage imageWithData: image.thumbnail];
	}
	else
	{
		// TODO: display placeholder image, have one for a CD vs Book
		cell.imageView.image	= [UIImage imageNamed: @"ImagePlaceholder.png"];
	}
	
	return cell;
}

// -----------------------------------------------------------------------------
//
// Handle row select.
//
// -----------------------------------------------------------------------------
- (void) tableView: (UITableView *) tableView didSelectRowAtIndexPath: (NSIndexPath *) indexPath
{
//	[fetchedResultsController.managedObjectContext lock];
	LoansDetailViewContoller *viewController	= [[LoansDetailViewContoller alloc] initWithStyle: UITableViewStyleGrouped];
	viewController.loan							= [fetchedResultsController objectAtIndexPath: indexPath];
//	[fetchedResultsController.managedObjectContext unlock];
	
	if ([viewController.loan.dummy boolValue] == NO)
	{
		[self.navigationController pushViewController: viewController animated: YES];
	}
	
	[viewController release];
}

// -----------------------------------------------------------------------------
//
// Open the library My Account page when the disclosure button is tapped.
//
// -----------------------------------------------------------------------------
- (void) tableView: (UITableView *) tableView accessoryButtonTappedForRowWithIndexPath: (NSIndexPath *) indexPath
{
//	[fetchedResultsController.managedObjectContext lock];
	
	Loan *loan = [fetchedResultsController objectAtIndexPath: indexPath];
	
	OPAC *opac = [OPAC opacForLibraryCard: loan.libraryCard];
	if ([opac respondsToSelector: @selector(myAccountURL)] == NO) return;
	
	URL *url = [opac performSelector: @selector(myAccountURL)];
	if (url == nil) return;
	
	WebViewController *viewController	= [[WebViewController alloc] init];
	viewController.title				= loan.libraryCard.name;
	viewController.url					= url;
	
//	[fetchedResultsController.managedObjectContext unlock];
	
	[self.navigationController pushViewController: viewController animated: YES];
	[viewController release];
}

- (BOOL) shouldAutorotateToInterfaceOrientation: (UIInterfaceOrientation) interfaceOrientation
{
	return YES;
}

@end